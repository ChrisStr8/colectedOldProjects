#BlueJ class context
comment0.params=
comment0.target=void\ testSorts()
comment0.text=\ Example\ method\ for\ testing\ and\ timing\ sorting\ algorithms.\r\n\ \ You\ will\ need\ to\ modify\ and\ extend\ this\ heavily\ to\ do\ your\r\n\ \ performance\ testing.\ It\ should\ probably\ run\ tests\ on\ each\ of\ the\ algorithms,\r\n\ \ on\ different\ sized\ arrays,\ and\ multiple\ times\ on\ each\ size.\r\n\ \ Make\ sure\ you\ create\ a\ new\ array\ each\ time\ you\ sort\ -\ it\ is\ not\ a\ good\ test\ if\r\n\ \ you\ resort\ the\ same\ array\ after\ it\ has\ been\ sorted.\r\n\ \ Hint\:\ if\ you\ want\ to\ copy\ an\ array,\ use\ copyArray\ (below)\r\n
comment1.params=data\ index1\ index2
comment1.target=void\ swap(java.lang.String[],\ int,\ int)
comment1.text=\ Swaps\ the\ specified\ elements\ of\ an\ array.\r\n\ \ Used\ in\ several\ of\ the\ sorting\ algorithms\r\n
comment10.params=data
comment10.target=void\ quickSort2(java.lang.String[])
comment10.text=\ Quick\ sort,\ second\ version\:\ \ simpler\ partition\ method\r\nfaster\ or\ slower?
comment11.params=data\ low\ high
comment11.target=void\ quickSort2(java.lang.String[],\ int,\ int)
comment12.params=data\ low\ high
comment12.target=int\ partition2(java.lang.String[],\ int,\ int)
comment13.params=data
comment13.target=boolean\ testSorted(java.lang.String[])
comment13.text=\ Tests\ whether\ an\ array\ is\ in\ sorted\ order\r\n
comment14.params=data
comment14.target=void\ printData(java.lang.String[])
comment15.params=size
comment15.target=java.lang.String[]\ createArray(int)
comment15.text=Constructs\ an\ array\ of\ Strings\ by\ making\ random\ String\ values
comment16.params=size\ filename
comment16.target=java.lang.String[]\ readArrayFromFile(int,\ java.lang.String)
comment16.text=\ Constructs\ an\ array\ of\ Strings\ by\ reading\ a\ file\r\n\ The\ size\ of\ the\ array\ will\ be\ the\ specified\ size,\ unless\ the\r\n\ file\ is\ too\ short,\ or\ size\ is\ -ve,\ in\ which\ cases\ the\ array\ will\r\n\ contain\ all\ the\ tokens\ in\ the\ file.\r\n
comment17.params=data
comment17.target=java.lang.String[]\ copyArray(java.lang.String[])
comment17.text=Create\ a\ new\ copy\ of\ an\ array\ of\ data
comment18.params=data\ size
comment18.target=java.lang.String[]\ copyArray(java.lang.String[],\ int)
comment18.text=Create\ a\ new\ copy\ of\ the\ first\ size\ elements\ of\ an\ array\ of\ data
comment19.params=data
comment19.target=void\ reverseArray(java.lang.String[])
comment2.params=data
comment2.target=void\ selectionSort(java.lang.String[])
comment2.text=Sorts\ the\ elements\ of\ an\ array\ of\ String\ using\ selection\ sort
comment20.params=args
comment20.target=void\ main(java.lang.String[])
comment3.params=data
comment3.target=void\ insertionSort(java.lang.String[])
comment3.text=Sorts\ the\ \ elements\ of\ an\ array\ of\ String\ using\ insertion\ sort
comment4.params=data
comment4.target=void\ mergeSort(java.lang.String[])
comment4.text=\ non-recursive,\ wrapper\ method\r\n\ \ copy\ data\ array\ into\ a\ temporary\ array\ \r\n\ \ call\ recursive\ mergeSort\ method\ \ \ \ \ \r\n
comment5.params=data\ temp\ low\ high
comment5.target=void\ mergeSort(java.lang.String[],\ java.lang.String[],\ int,\ int)
comment5.text=Recursive\ mergeSort\ method
comment6.params=from\ to\ low\ mid\ high
comment6.target=void\ merge(java.lang.String[],\ java.lang.String[],\ int,\ int,\ int)
comment6.text=\ Merge\ method\r\n\ \ Merge\ from[low..mid-1]\ with\ from[mid..high-1]\ into\ to[low..high-1]\r\n\ \ Print\ data\ array\ after\ merge\ using\ printData\r\n
comment7.params=data
comment7.target=void\ quickSort(java.lang.String[])
comment7.text=Quick\ sort\ recursive\ call
comment8.params=data\ low\ high
comment8.target=void\ quickSort(java.lang.String[],\ int,\ int)
comment9.params=data\ low\ high
comment9.target=int\ partition(java.lang.String[],\ int,\ int)
comment9.text=\ Partition\ into\ small\ items\ (low..mid-1)\ and\ large\ items\ (mid..high-1)\ \r\n\ \ Print\ data\ array\ after\ partition\r\n
numComments=21

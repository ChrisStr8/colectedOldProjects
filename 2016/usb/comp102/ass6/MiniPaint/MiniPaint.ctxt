#BlueJ class context
comment0.params=
comment0.target=MiniPaint()
comment0.text=Sets\ up\ the\ user\ interface\ -\ mouselistener\ and\ buttons
comment1.params=action\ x\ y
comment1.target=void\ doMouse(java.lang.String,\ double,\ double)
comment1.text=\r\n\ Respond\ to\ mouse\ events\r\n\ When\ pressed,\ remember\ the\ position.\r\n\ When\ released,\ draw\ the\ current\ shape\ using\ the\ pressed\ position\r\n\ \ and\ the\ released\ position.\r\n\ Uses\ the\ value\ in\ the\ field\ to\ determine\ which\ kind\ of\ shape\ to\ draw.\r\n\ Although\ you\ could\ do\ all\ the\ drawing\ in\ this\ method,\r\n\ \ it\ may\ be\ better\ to\ call\ some\ helper\ methods\ for\ the\ more\r\n\ \ complex\ actions\ (and\ then\ define\ the\ helper\ methods\!)\r\n
comment10.params=x\ y
comment10.target=void\ drawALine(double,\ double)
comment11.params=x\ y\ width\ height
comment11.target=void\ drawAnImage(double,\ double,\ double,\ double)
comment12.params=x\ y\ width\ height
comment12.target=void\ drawrect(double,\ double,\ double,\ double)
comment13.params=x\ y\ width\ height
comment13.target=void\ drawoval(double,\ double,\ double,\ double)
comment14.params=x\ y\ width\ height
comment14.target=void\ erase(double,\ double,\ double,\ double)
comment15.params=arguments
comment15.target=void\ main(java.lang.String[])
comment15.text=\#\ YOUR\ CODE\ HERE
comment2.params=
comment2.target=void\ doLine()
comment3.params=
comment3.target=void\ doRect()
comment4.params=
comment4.target=void\ doOval()
comment5.params=
comment5.target=void\ doImage()
comment6.params=
comment6.target=void\ doEraser()
comment7.params=
comment7.target=void\ doColour()
comment8.params=
comment8.target=void\ doFill()
comment9.params=x\ y
comment9.target=void\ drawAShape(double,\ double)
numComments=16

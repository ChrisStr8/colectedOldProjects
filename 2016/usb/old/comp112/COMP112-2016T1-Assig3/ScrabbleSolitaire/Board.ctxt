#BlueJ class context
comment0.params=
comment0.target=Board()
comment0.text=Construct\ a\ new\ Board\ object
comment1.params=x\ y
comment1.target=boolean\ on(double,\ double)
comment1.text=Is\ the\ position\ (x,y)\ on\ the\ board
comment2.params=x\ y
comment2.target=int[]\ rowCol(double,\ double)
comment2.text=\r\n\ Return\ the\ row/col\ corresponding\ to\ the\ point\ x,y.\r\n
comment3.params=
comment3.target=void\ draw()
comment3.text=\r\n\ Draw\ the\ board.\r\n\ Assumes\ that\ the\ graphics\ pane\ has\ been\ cleared\r\n
comment4.params=
comment4.target=Tile\ newTile()
comment4.text=\ public\ static\ void\ testValid(){\r\n\ \ \ \ \ \ \ \ Board\ b\ \=\ new\ Board();\r\n\ \ \ \ \ \ \ \ System.out.println("Testing\ tiles\ in\ a\ row");\r\n\ \ \ \ \ \ \ \ //place\ tiles\ in\ a\ row\ \r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 2,\ 2);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 2,\ 3);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 2,\ 4);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("2/2,\ 2/3,\ 2/4\ should\ be\ valid");}\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 2,\ 6);\r\n\ \ \ \ \ \ \ \ if\ (b.validPlay())\ {System.out.println("2/2,\ 2/3,\ 2/4,\ 2/6\ should\ NOT\ be\ valid");}\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 2,\ 5);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("2/2,\ ..\ 2/6\ should\ be\ valid");}\r\n\ \ \ \ \ \ \ \ b.commit();\r\n\r\n\ \ \ \ \ \ \ \ System.out.println("Testing\ tiles\ in\ a\ disconnected\ row");\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 4);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 5);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 6);\r\n\ \ \ \ \ \ \ \ if\ (b.validPlay())\ {System.out.println("disconnected\ 5/4,\ 5/5/,\ 5/6\ should\ NOT\ be\ valid");}\r\n\ \ \ \ \ \ \ \ System.out.println("Testing\ tiles\ in\ an\ L\ shape");\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 4,\ 6);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 3,\ 6);\r\n\ \ \ \ \ \ \ \ if\ (b.validPlay())\ {System.out.println("5/4,\ 5/5,\ 5/6,\ 4/6,\ 3/6\ should\ NOT\ be\ valid");}\r\n\ \ \ \ \ \ \ \ b.pickup(5,\ 4);\r\n\ \ \ \ \ \ \ \ b.pickup(5,\ 5);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("5/6,\ 4/6,\ 3/6\ should\ be\ valid");}\r\n\r\n\ \ \ \ \ \ \ \ System.out.println("Testing\ tiles\ in\ a\ column");\r\n\ \ \ \ \ \ \ \ b.reset();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 2,\ 2);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 3,\ 2);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 4,\ 2);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("2/2,\ 3/2,\ 4/2\ should\ be\ valid");}\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 6,\ 2);\r\n\ \ \ \ \ \ \ \ if\ (b.validPlay())\ {System.out.println("2/2,\ 3/2,\ 4/2,\ 6/2\ should\ NOT\ be\ valid");}\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 2);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("2/2,\ ..\ 6/2\ should\ be\ valid");}\r\n\ \ \ \ \ \ \ \ b.commit();\r\n\r\n\ \ \ \ \ \ \ \ System.out.println("Testing\ tiles\ in\ a\ disconnected\ column");\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 4,\ 5);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 5);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 6,\ 5);\r\n\ \ \ \ \ \ \ \ if\ (b.validPlay())\ {System.out.println("disconnected\ 4/5,\ 5/5/,\ 6/5\ should\ NOT\ be\ valid");}\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 6,\ 4);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 6,\ 3);\r\n\ \ \ \ \ \ \ \ if\ (b.validPlay())\ {System.out.println("\ 4/5,\ 5/5,\ 6/5,\ 6/4,\ 6/3\ should\ NOT\ be\ valid");}\r\n\ \ \ \ \ \ \ \ b.pickup(4,\ 5);\r\n\ \ \ \ \ \ \ \ b.pickup(5,\ 5);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("6/5,\ 6/4,\ 6/3\ should\ be\ valid");}\r\n\r\n\ \ \ \ \ \ \ \ System.out.println("Testing\ column\ connected\ at\ ends\ and\ side");\r\n\ \ \ \ \ \ \ \ b.reset();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 10,\ 5);\r\n\ \ \ \ \ \ \ \ b.commit();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 7,\ 5);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 8,\ 5);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 9,\ 5);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("7,8,9/5\ should\ be\ valid,\ given\ 10/5");}\r\n\ \ \ \ \ \ \ \ b.reset();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 10,\ 5);\r\n\ \ \ \ \ \ \ \ b.commit();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 11,\ 5);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 12,\ 5);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 13,\ 5);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("11,12,13/5\ should\ be\ valid,\ given\ 10/5");}\r\n\ \ \ \ \ \ \ \ b.reset();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 10,\ 5);\r\n\ \ \ \ \ \ \ \ b.commit();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 9,\ 6);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 10,\ 6);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 11,\ 6);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("9,10,11/6\ should\ be\ valid,\ given\ 10/5");}\r\n\r\n\ \ \ \ \ \ \ \ System.out.println("Testing\ row\ connected\ at\ ends\ and\ side");\r\n\ \ \ \ \ \ \ \ b.reset();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 10);\r\n\ \ \ \ \ \ \ \ b.commit();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 7);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 8);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 9);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("5/7,8,9\ should\ be\ valid,\ given\ 5/10");}\r\n\ \ \ \ \ \ \ \ b.reset();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 10);\r\n\ \ \ \ \ \ \ \ b.commit();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 11);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 12);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 13);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("5/11,12,13\ should\ be\ valid,\ given\ 5/10");}\r\n\ \ \ \ \ \ \ \ b.reset();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 10);\r\n\ \ \ \ \ \ \ \ b.commit();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 6,\ 9);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 6,\ 10);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 6,\ 11);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("6/9,10,11\ should\ be\ valid,\ given\ 5/10");}\r\n\r\n\r\n\ \ \ \ \ \ \ \ System.out.println("Testing\ column\ spanning\ fixed\ tiles");\r\n\ \ \ \ \ \ \ \ b.reset();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 6,\ 5);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 9,\ 5);\r\n\ \ \ \ \ \ \ \ b.commit();\r\n\ \ \ \ \ \ \ \ if\ (b.validPlay())\ {System.out.println("no\ working\ tiles\ should\ NOT\ be\ valid");}\r\n\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 4,\ 5);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 5);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 7,\ 5);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("4,5,7/5\ should\ be\ valid,\ given\ 6/5");}\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 10,\ 5);\r\n\ \ \ \ \ \ \ \ if\ (b.validPlay())\ {System.out.println("4,5,7,10/5,\ should\ NOT\ be\ valid,\ given\ 6,9/5");}\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 8,\ 5);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("4,5,7,8,10/5,\ should\ be\ valid,\ given\ 6,9/5");}\r\n\ \ \ \ \ \ \ \ b.reset();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 6,\ 5);\r\n\ \ \ \ \ \ \ \ b.commit();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 3,\ 5);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 4,\ 5);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 7,\ 5);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 8,\ 5);\r\n\ \ \ \ \ \ \ \ if\ (b.validPlay())\ {System.out.println("3,4,7,8/5,\ should\ NOT\ be\ valid,\ given\ 6/5");}\r\n\r\n\ \ \ \ \ \ \ \ System.out.println("Testing\ row\ spanning\ fixed\ tiles");\r\n\ \ \ \ \ \ \ \ b.reset();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 6);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 9);\r\n\ \ \ \ \ \ \ \ b.commit();\r\n\ \ \ \ \ \ \ \ if\ (b.validPlay())\ {System.out.println("no\ working\ tiles\ should\ NOT\ be\ valid");}\r\n\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 4);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 5);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 7);\r\n\ \ \ \ \ \ \ \ b.draw();\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("5/4,5,7\ should\ be\ valid,\ given\ 5/6");}\r\n\ \ \ \ \ \ \ \ else\ {System.out.println("5/4,5,7\ is\ considered,\ given\ 5/6");}\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 10);\r\n\ \ \ \ \ \ \ \ if\ (b.validPlay())\ {System.out.println("5/4,5,7,10,\ should\ NOT\ be\ valid,\ given\ 5/6,9");}\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 8);\r\n\ \ \ \ \ \ \ \ if\ (\!b.validPlay())\ {System.out.println("5/4,5,7,8,10,\ should\ be\ valid,\ given\ 5/6,9");}\r\n\ \ \ \ \ \ \ \ b.reset();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 6);\r\n\ \ \ \ \ \ \ \ b.commit();\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 3);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 4);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 7);\r\n\ \ \ \ \ \ \ \ b.place(newTile(),\ 5,\ 8);\r\n\ \ \ \ \ \ \ \ if\ (b.validPlay())\ {System.out.println("5/3,4,7,8,\ should\ NOT\ be\ valid,\ given\ 5/6");}\r\n\ \ \ \ \ \ \ \ System.out.println("Tests\ all\ done");\r\n\ \ \ \ }\r\n
numComments=5

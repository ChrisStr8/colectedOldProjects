Stack nodes, counts, fromNodes
Set notVisited
Set articulationPoints

for each node in the graph
    set node.count to infinity
    add node to notVisited

while notVisited is not empty
    start = the first node in notVisited
    remove start for notVisited
    set start.count to 0
    int numSubtrees = 0
    for each neighbour of start
        if count = infinity
            findArticulationPoints(neighbour, start)
            add 1 to numSubtrees

    if numSubtrees is greater than 1
        add start to articulationPoints


findArticulationPoints(start, root)
    add start to nodes
    add 1 to counts
    add root to fromNodes
    while nodes is not empty
        current = nodes.peek
        count = counts.peek
        fromNode = fromNodes.peek
        if current.count is infinity
            set current.count to count
            set current.reachBack to count
            set current.children to a new queue
            for each neighbour of current
                if neighbour is not fromNode
                    add neighbour to current.children
        else if current.children is not empty
            child = current.children.poll
            if child.count is less than infinity
                current.reachBack = the smallest out of current.reachBack and child.count
            else
                add  child to nodes
                add count+1 to counts
                add current to fromNodes
        else
            if current is not start
                if current.reachBack is less than or equal to fromNode.count
                    add fromNode to articulationPoints
                fromNode.reachBack = the smallest out of current.reachBack and fromNode.reachBack